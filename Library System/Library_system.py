import os
from tabulate import tabulate
from datetime import datetime, timedelta

# Base folder for data files (same folder as script)
BASE_DIR = os.path.dirname(os.path.abspath(__file__)) if '__file__' in globals() else os.getcwd()

def get_path(filename):
    return os.path.join(BASE_DIR, filename)

# ------------ Utility ------------
def read_file(filename, min_fields=None):
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô list of list
    ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ min_fields ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á IndexError
    """
    filepath = get_path(filename)
    if not os.path.exists(filepath):
        return []
    records = []
    with open(filepath, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            parts = line.split("|")
            if min_fields and len(parts) < min_fields:
                parts += [""] * (min_fields - len(parts))
            records.append(parts)
    return records


def write_file(filename, records):
    filepath = get_path(filename)
    try:
        with open(filepath, "w", encoding="utf-8") as f:
            for rec in records:
                rec = [str(x) for x in rec]
                f.write("|".join(rec) + "\n")
        return True
    except OSError as e:
        print(f"‚úò ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename}: {e}")
        return False


def get_next_id(records):
    if not records:
        return 1
    ids = []
    for r in records:
        try:
            if r and r[-1] == "A":
                ids.append(int(r[0]))
        except Exception:
            continue
    return max(ids) + 1 if ids else 1


def find_free_slot(records):
    for i, r in enumerate(records):
        if r and r[-1] == "D":
            return i
    return None


def validate_date(date_str):
    try:
        datetime.strptime(date_str, "%d/%m/%Y")
        return True
    except ValueError:
        return False


def calculate_fine(borrow_date, return_date, actual_return_date=None):
    try:
        due_date = datetime.strptime(return_date, "%d/%m/%Y")
        if actual_return_date:
            actual = datetime.strptime(actual_return_date, "%d/%m/%Y")
            days_late = (actual - due_date).days
        else:
            days_late = (datetime.now() - due_date).days
        return max(0, days_late * 5)
    except Exception:
        return 0


def ensure_min_len(lst, n):
    while len(lst) < n:
        lst.append("")

# Helpers to get names/titles
def get_book_title(book_id):
    books = read_file("books.txt", min_fields=5)
    return next((b[1] for b in books if b and b[0].strip() == book_id and b[-1] == "A"), "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠")


def get_member_name(member_id):
    members = read_file("members.txt", min_fields=4)
    return next((m[1] for m in members if m and m[0].strip() == member_id and m[-1] == "A"), "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà
def get_borrowed_count(book_id):
    """‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà"""
    borrow_items = read_file("borrow_items.txt", min_fields=6)
    count = 0
    for bi in borrow_items:
        try:
            if bi and bi[-1] == "A" and bi[2].strip() == book_id and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°":
                count += 1
        except Exception:
            continue
    return count

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
def get_book_borrow_status(book_id):
    """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    borrow_items = read_file("borrow_items.txt", min_fields=6)
    for bi in borrow_items:
        try:
            if bi and bi[-1] == "A" and bi[2].strip() == book_id and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°":
                return "‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°"
        except Exception:
            continue
    return "‡∏ß‡πà‡∏≤‡∏á"

# ------------ CRUD Template ------------
def add_record(filename, fields):
    records = read_file(filename)
    slot = find_free_slot(records)
    new_id = str(get_next_id(records))
    data = [new_id] + [str(x) for x in fields] + ["A"]
    if slot is not None:
        records[slot] = data
    else:
        records.append(data)
    ok = write_file(filename, records)
    if ok:
        print("‚úî ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    return new_id


def view_records(filename, headers, min_fields=0):
    records = read_file(filename, min_fields=min_fields if min_fields > 0 else None)
    print("\n" + "="*40)
    print(" | ".join(headers))
    print("="*40)
    for r in records:
        if r and r[-1] == "A":
            # ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Status ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            display_record = r[:-1]  # ‡πÄ‡∏≠‡∏≤ status ‡∏≠‡∏≠‡∏Å
            print(" | ".join(display_record))
    print("="*40)


def update_record(filename, record_id, new_fields):
    records = read_file(filename)
    for i, r in enumerate(records):
        if r and r[0] == record_id and r[-1] == "A":
            records[i] = [record_id] + [str(x) for x in new_fields] + ["A"]
            write_file(filename, records)
            print("‚úî ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            return
    print("‚úò ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")


def delete_record(filename, record_id):
    records = read_file(filename)
    for i, r in enumerate(records):
        if r and r[0] == record_id and r[-1] == "A":
            records[i][-1] = "D"
            write_file(filename, records)
            print("‚úî ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (Free-list)")
            return
    print("‚úò ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ------------ Specific Functions ------------
def add_book():
    title = input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ").strip()
    author = input("‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á: ").strip()
    while True:
        try:
            total_copies = int(input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏°: ").strip())
            if total_copies <= 0:
                print("‚úò ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
                continue
            break
        except ValueError:
            print("‚úò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    add_record("books.txt", [title, author, total_copies])


def view_books():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏á/‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°"""
    records = read_file("books.txt", min_fields=5)
    print("\n" + "="*80)
    print(" | ".join(["BookID", "Title", "Author", "Total Copies", "Available"]))
    print("="*80)
    for r in records:
        if r and r[-1] == "A":
            total_copies = int(r[3]) if r[3].isdigit() else 0
            borrowed_count = get_borrowed_count(r[0])
            available_copies = total_copies - borrowed_count
            print(" | ".join([r[0], r[1], r[2], str(total_copies), str(available_copies)]))
    print("="*80)


def add_member():
    name = input("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ").strip()
    phone = input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ").strip()
    add_record("members.txt", [name, phone])


def view_members():
    view_records("members.txt", ["MemberID", "Name", "Phone"], min_fields=4)

# ‡∏¢‡∏∑‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏•‡πà‡∏° (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏•‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡πÄ‡∏•‡πà‡∏°)
def check_book_availability(book_id):
    """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    books = read_file("books.txt", min_fields=5)
    book = next((b for b in books if b and b[0].strip() == book_id and b[-1] == "A"), None)
    if not book:
        return False
    
    total_copies = int(book[3]) if book[3].isdigit() else 0
    borrowed_count = get_borrowed_count(book_id)
    return borrowed_count < total_copies


def check_member_exists(member_id):
    members = read_file("members.txt", min_fields=4)
    return any(m and m[0].strip() == member_id and m[-1] == "A" for m in members)


def check_book_exists(book_id):
    books = read_file("books.txt", min_fields=5)
    return any(b and b[0].strip() == book_id and b[-1] == "A" for b in books)


def show_members_list():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    records = read_file("members.txt", min_fields=4)
    active_members = []
    
    for r in records:
        if r and r[-1] == "A":
            active_members.append([r[0], r[1], r[2]])
    
    if active_members:
        print("\nüë• ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:")
        print(tabulate(active_members, headers=["MemberID","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å","‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"], tablefmt="grid"))
    else:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

def show_available_books():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°"""
    records = read_file("books.txt", min_fields=5)
    available_books = []
    
    for r in records:
        if r and r[-1] == "A":
            total_copies = int(r[3]) if r[3].isdigit() else 0
            borrowed_count = get_borrowed_count(r[0])
            available_copies = total_copies - borrowed_count
            if available_copies > 0:
                available_books.append([r[0], r[1], r[2], str(available_copies)])
    
    if available_books:
        print("\nüìö ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°:")
        print(tabulate(available_books, headers=["BookID","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠","‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á","‡πÄ‡∏•‡πà‡∏°‡∏ß‡πà‡∏≤‡∏á"], tablefmt="grid"))
    else:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°")

def add_borrow():
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    show_members_list()
    
    member_id = input("\n‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ").strip()
    if not check_member_exists(member_id):
        print("‚úò ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°
    show_available_books()
    
    print("\n‡∏Å‡∏£‡∏≠‡∏Å BookID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° (‡∏û‡∏¥‡∏°‡∏û‡πå 'done' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠ 'cancel' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å):")
    print("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡πÄ‡∏•‡πà‡∏°")
    selected_books = []
    while True:
        if len(selected_books) >= 3:
            print("‚ö†Ô∏è ‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏ö 3 ‡πÄ‡∏•‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≥‡∏Å‡∏±‡∏î 3 ‡πÄ‡∏•‡πà‡∏°‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")
            break
            
        book_id = input(f"BookID ({len(selected_books)+1}/3): ").strip()
        if book_id.lower() == "done":
            break
        if book_id.lower() == "cancel":
            print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)")
            return
        if not check_book_exists(book_id):
            print("‚úò ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            continue
        if not check_book_availability(book_id):
            print("‚úò ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡πà‡∏°‡∏ß‡πà‡∏≤‡∏á")
            continue
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
        books = read_file("books.txt", min_fields=5)
        book = next((b for b in books if b and b[0].strip() == book_id and b[-1] == "A"), None)
        if book:
            total_copies = int(book[3]) if book[3].isdigit() else 0
            borrowed_count = get_borrowed_count(book_id)
            available_copies = total_copies - borrowed_count
            print(f"‚úî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ {get_book_title(book_id)} (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {available_copies-1} ‡πÄ‡∏•‡πà‡∏°)")
        
        selected_books.append(book_id)

    if not selected_books:
        print("‚úò ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return

    # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ñ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    borrow_date = input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏° (dd/mm/yyyy) (‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå 'cancel' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å): ").strip()
    if borrow_date.lower() == "cancel":
        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)")
        return
    if not validate_date(borrow_date):
        print("‚úò ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return

    borrow_dt = datetime.strptime(borrow_date, "%d/%m/%Y")
    return_dt = borrow_dt + timedelta(days=7)
    return_date = return_dt.strftime("%d/%m/%Y")
    print(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô: {return_date}")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏à‡∏£‡∏¥‡∏á
    borrow_id = add_record("borrows.txt", [member_id, borrow_date, return_date, "0", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°"])
    for book_id in selected_books:
        add_record("borrow_items.txt", [borrow_id, book_id, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°", "0"])
    print("‚úî ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")


def show_active_borrows():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö"""
    borrows = read_file("borrows.txt", min_fields=7)
    borrow_items = read_file("borrow_items.txt", min_fields=6)
    active_borrows = []
    
    for br in borrows:
        if not br or br[-1] != "A":
            continue
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        has_unreturned = any(bi and len(bi) >= 6 and bi[1] == br[0] and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°" and bi[-1] == "A" for bi in borrow_items)
        if has_unreturned:
            member_name = get_member_name(br[1])
            borrow_date = br[2]
            return_date = br[3]
            
            # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà
            book_titles = []
            for bi in borrow_items:
                if bi and len(bi) >= 6 and bi[1] == br[0] and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°" and bi[-1] == "A":
                    book_titles.append(get_book_title(bi[2]))
            books_str = ", ".join(book_titles)
            
            active_borrows.append([br[0], member_name, books_str, borrow_date, return_date])
    
    if active_borrows:
        print("\nüîÑ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö:")
        print(tabulate(active_borrows, headers=["BorrowID","‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°","‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°","‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô"], tablefmt="grid"))
        return True
    else:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö")
        return False

def delete_borrow_record(borrow_id):
    """‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡∏∞ borrow_items ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"""
    # ‡∏•‡∏ö borrow_items ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
    borrow_items = read_file("borrow_items.txt", min_fields=6)
    for i, bi in enumerate(borrow_items):
        if bi and bi[1] == borrow_id and bi[-1] == "A":
            borrow_items[i][-1] = "D"  # ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏ö
    write_file("borrow_items.txt", borrow_items)
    
    # ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏´‡∏•‡∏±‡∏Å
    delete_record("borrows.txt", borrow_id)
    print("‚úî ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def show_borrowed_books(borrow_id):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ô‡∏µ‡πâ"""
    borrow_items = read_file("borrow_items.txt", min_fields=6)
    borrowed_books = []
    
    for bi in borrow_items:
        if bi and len(bi) >= 6 and bi[1] == borrow_id and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°" and bi[-1] == "A":
            book_id = bi[2]
            book_title = get_book_title(book_id)
            borrowed_books.append([book_id, book_title])
    
    if borrowed_books:
        print(f"\nüìñ ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {borrow_id}:")
        print(tabulate(borrowed_books, headers=["BookID","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"], tablefmt="grid"))
        return True
    else:
        print(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ {borrow_id}")
        return False

def return_book():
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô
    if not show_active_borrows():
        return
    
    borrow_id = input("\n‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°: ").strip()
    borrows = read_file("borrows.txt", min_fields=7)
    borrow_items = read_file("borrow_items.txt", min_fields=6)

    borrow = next((br for br in borrows if br and br[0] == borrow_id and br[-1] == "A"), None)
    if not borrow:
        print("‚úò ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°")
        return

    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà
    if not show_borrowed_books(borrow_id):
        return

    items_to_return = []
    print("\n‡∏Å‡∏£‡∏≠‡∏Å BookID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô (‡∏û‡∏¥‡∏°‡∏û‡πå 'done' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à):")
    while True:
        book_id = input("BookID: ").strip()
        if book_id.lower() == "done":
            break
        found = False
        for i, bi in enumerate(borrow_items):
            # bi: [item_id, borrow_id, book_id, status, fine, "A"]
            if bi and len(bi) >= 6 and bi[1] == borrow_id and bi[2] == book_id and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°":
                items_to_return.append(i)
                found = True
                print(f"‚úî ‡πÄ‡∏û‡∏¥‡πà‡∏° {get_book_title(book_id)} ‡∏•‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô")
                break
        if not found:
            print("‚úò ‡πÑ‡∏°‡πà‡∏û‡∏ö BookID ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
    
    if not items_to_return:
        print("‚úò ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô")
        return

    actual_return_date = input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏à‡∏£‡∏¥‡∏á (dd/mm/yyyy): ").strip()
    if not validate_date(actual_return_date):
        print("‚úò ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return

    # ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ + ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å borrow (br[2]=borrow_date, br[3]=return_date)
    for i in items_to_return:
        bi = borrow_items[i]
        ensure_min_len(bi, 6)
        fine = calculate_fine(borrow[2], borrow[3], actual_return_date)
        borrow_items[i][3] = "‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
        borrow_items[i][4] = str(fine)

    write_file("borrow_items.txt", borrow_items)

    # ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏•‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    still_borrowed = any(bi and len(bi) >= 6 and bi[1] == borrow_id and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°" and bi[-1] == "A" for bi in borrow_items)
    for i, br in enumerate(borrows):
        if br and br[0] == borrow_id:
            ensure_min_len(br, 6)
            borrows[i][5] = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°" if still_borrowed else "‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
            break
    write_file("borrows.txt", borrows)

    print("‚úî ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")


def view_borrows():
    borrows = read_file("borrows.txt", min_fields=7)
    borrow_items = read_file("borrow_items.txt", min_fields=6)
    members = read_file("members.txt", min_fields=4)
    books = read_file("books.txt", min_fields=5)  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å 4 ‡πÄ‡∏õ‡πá‡∏ô 5

    table = []
    for br in borrows:
        if not br or br[-1] != "A":
            continue
        member_name = get_member_name(br[1])
        borrow_date = br[2]
        return_date = br[3]
        status = br[5] if len(br) > 5 else ""
        # ‡∏´‡∏≤ titles ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á borrow ‡∏ô‡∏µ‡πâ
        titles = []
        for bi in borrow_items:
            if bi and len(bi) >= 6 and bi[1] == br[0] and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°" and bi[-1] == "A":
                titles.append(get_book_title(bi[2]))
        titles_str = ", ".join(titles) if titles else "-"
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ô‡∏µ‡πâ (‡∏à‡∏≤‡∏Å borrow_items)
        fine_sum = 0.0
        for bi in borrow_items:
            if bi and bi[-1] == "A" and bi[1] == br[0]:
                try:
                    fine_sum += float(bi[4]) if str(bi[4]).replace('.', '', 1).isdigit() else 0
                except Exception:
                    continue
        table.append([br[0], member_name, titles_str, borrow_date, return_date, status, f"{fine_sum:.2f}"])

    if table:
        print(tabulate(table, headers=["BorrowID","Member","Books(‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°)","BorrowDate","ReturnDate","Status","TotalFine"], tablefmt="grid"))
    else:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°")

# ------------ Enhanced Report ------------
def generate_report():
    books = read_file("books.txt", min_fields=5)  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å 4 ‡πÄ‡∏õ‡πá‡∏ô 5
    members = read_file("members.txt", min_fields=4)
    borrows = read_file("borrows.txt", min_fields=7)
    borrow_items = read_file("borrow_items.txt", min_fields=6)

    print("\nüìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î")
    print("="*60)

    total_books = sum(1 for b in books if b and b[-1] == "A")
    total_members = sum(1 for m in members if m and m[-1] == "A")
    total_borrows = sum(1 for br in borrows if br and br[-1] == "A")

    active_borrows = 0
    completed_borrows = 0
    for br in borrows:
        if not br or br[-1] != "A":
            continue
        items = [bi for bi in borrow_items if bi and len(bi) >= 6 and bi[1] == br[0] and bi[-1] == "A"]
        if any(i[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°" for i in items):
            active_borrows += 1
        else:
            completed_borrows += 1

    total_fine = 0
    unpaid_fine = 0
    for bi in borrow_items:
        if not bi or bi[-1] != "A":
            continue
        try:
            fine = float(bi[4]) if str(bi[4]).replace('.', '', 1).isdigit() else 0
            total_fine += fine
            # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
            if bi[3].strip() == "‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß" and fine > 0:
                unpaid_fine += fine
        except Exception:
            continue

    # ‡∏ô‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà
    books_currently_borrowed = 0  # ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
    
    for bi in borrow_items:
        if bi and bi[-1] == "A" and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°":
            books_currently_borrowed += 1

    print(f"üìö ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_books} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏°‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    total_copies_all = 0
    for b in books:
        if b and b[-1] == "A":
            total_copies_all += int(b[3]) if b[3].isdigit() else 0
    
    print(f"üìñ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏°‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_copies_all} ‡πÄ‡∏•‡πà‡∏°")
    print(f"üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_members} ‡∏Ñ‡∏ô")
    print(f"üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_borrows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà: {active_borrows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"‚úÖ ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {completed_borrows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"üìò ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà: {books_currently_borrowed} ‡πÄ‡∏•‡πà‡∏°")
    print(f"üìó ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà: {total_copies_all - books_currently_borrowed} ‡πÄ‡∏•‡πà‡∏°")
    print(f"üí∞ ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_fine:.2f} ‡∏ö‡∏≤‡∏ó")
    print(f"‚ö†Ô∏è  ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: {unpaid_fine:.2f} ‡∏ö‡∏≤‡∏ó")
    print("="*60)

    # ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°
    print("\nüìñ ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°")
    borrowed_books = []
    for bi in borrow_items:
        if bi and bi[-1] == "A" and len(bi) >= 6 and bi[3].strip() == "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°":
            borrow_id = bi[1]
            book_id = bi[2]
            br = next((b for b in borrows if b and b[0] == borrow_id and b[-1] == "A"), None)
            if br:
                member_name = get_member_name(br[1])
                borrow_date = br[2]
                return_date = br[3]
                try:
                    due_date = datetime.strptime(return_date, "%d/%m/%Y")
                    days_overdue = (datetime.now() - due_date).days
                    overdue_status = f"‡πÄ‡∏Å‡∏¥‡∏ô {days_overdue} ‡∏ß‡∏±‡∏ô" if days_overdue > 0 else "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô"
                except Exception:
                    overdue_status = "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"
                book_title = get_book_title(book_id)
                borrowed_books.append([borrow_id, member_name, book_title, borrow_date, return_date, overdue_status])

    if borrowed_books:
        print(tabulate(borrowed_books, headers=["‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°","‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠","‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°","‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"], tablefmt="grid"))
    else:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà")

    # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö
    print("\nüí∞ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö")
    fine_records = []
    for bi in borrow_items:
        if not bi or bi[-1] != "A":
            continue
        try:
            fine = float(bi[4]) if str(bi[4]).replace('.', '', 1).isdigit() else 0
            if fine > 0:
                borrow_id = bi[1]
                br = next((b for b in borrows if b and b[0] == borrow_id and b[-1] == "A"), None)
                if br:
                    member_name = get_member_name(br[1])
                    book_title = get_book_title(bi[2])
                    status = bi[3]
                    fine_records.append([member_name, book_title, f"{fine:.2f}", status])
        except Exception:
            continue

    if fine_records:
        print(tabulate(fine_records, headers=["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å","‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠","‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö (‡∏ö‡∏≤‡∏ó)","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"], tablefmt="grid"))
    else:
        print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö")

    # ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
    print("\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°")
    book_borrow_count = {}
    for bi in borrow_items:
        if bi and bi[-1] == "A":
            book_borrow_count[bi[2]] = book_borrow_count.get(bi[2], 0) + 1

    if book_borrow_count:
        popular_books = sorted(book_borrow_count.items(), key=lambda x: x[1], reverse=True)[:5]
        print("‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö:")
        for i, (book_id, count) in enumerate(popular_books, 1):
            book_title = get_book_title(book_id)
            print(f"{i}. {book_title} - ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏° {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    print("="*60)

# ------------ Main Menu ------------
def main():
    while True:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà: Book -> Member -> Borrow -> Report -> Exit
        data = ["1. Add Book","2. View Books","3. Update Book","4. Delete Book",
                "5. Add Member","6. View Members","7. Update Member","8. Delete Member",
                "9. Add Borrow","10. View Borrows","11. Return Book","12. Update Borrow",
                "13. Delete Borrow","14. Generate Report","0. Exit"]
        table = [data[i:i+4] for i in range(0,len(data),4)]
        print("\n\t\t\t\t===== ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å =====")
        print(tabulate(table, tablefmt="grid"))

        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π: ").strip()

        # Book Management (1-4)
        if choice == "1": add_book()
        elif choice == "2": view_books()
        elif choice == "3":
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            view_books()
            bid = input("\n‡πÉ‡∏™‡πà BookID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ").strip()
            title = input("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà: ").strip()
            author = input("‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: ").strip()
            while True:
                try:
                    total_copies = int(input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏°‡πÉ‡∏´‡∏°‡πà: ").strip())
                    if total_copies <= 0:
                        print("‚úò ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
                        continue
                    break
                except ValueError:
                    print("‚úò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            update_record("books.txt", bid, [title, author, total_copies])
        elif choice == "4":
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
            view_books()
            bid = input("\n‡πÉ‡∏™‡πà BookID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ").strip()
            delete_record("books.txt", bid)
        # Member Management (5-8)
        elif choice == "5": add_member()
        elif choice == "6": view_members()
        elif choice == "7":
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            view_members()
            mid = input("\n‡πÉ‡∏™‡πà MemberID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ").strip()
            name = input("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà: ").strip()
            phone = input("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà: ").strip()
            update_record("members.txt", mid, [name, phone])
        elif choice == "8":
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
            view_members()
            mid = input("\n‡πÉ‡∏™‡πà MemberID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ").strip()
            delete_record("members.txt", mid)
        # Borrow Management (9-13)
        elif choice == "9": add_borrow()
        elif choice == "10": view_borrows()
        elif choice == "11": return_book()
        elif choice == "12":
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            view_borrows()
            borrow_id = input("\n‡πÉ‡∏™‡πà BorrowID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ").strip()
            show_members_list()
            member_id = input("\nMemberID ‡πÉ‡∏´‡∏°‡πà: ").strip()
            borrow_date = input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà (dd/mm/yyyy): ").strip()
            return_date = input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏´‡∏°‡πà (dd/mm/yyyy): ").strip()
            fine = input("‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà: ").strip()
            status = input("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà: ").strip()
            update_record("borrows.txt", borrow_id, [member_id, borrow_date, return_date, fine, status])
        elif choice == "13":
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
            view_borrows()
            borrow_id = input("\n‡πÉ‡∏™‡πà BorrowID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ").strip()
            delete_borrow_record(borrow_id)
        # Report & Exit
        elif choice == "14": generate_report()
        elif choice == "0":
            print("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö")
            break
        else:
            print("‚úò ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

if __name__ == "__main__":
    main()